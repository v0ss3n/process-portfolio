I"Úh<h1 id="experiment-1">Experiment 1</h1>
<p>The first experimental design tool test.</p>

<h2 id="introduction">Introduction</h2>
<p>My initial plan in an ideal scenario would have been this:</p>

<ol>
  <li>figure out what sensor I need to determine 2 dimensional position (position sensor)</li>
  <li>make a simple circuit with a switch (on/off button) that records the x and y co√∂rdinates</li>
  <li>write processing code (or another language) that uses this x and y data to draw dots/lines (dots together form the line) when the button is pressed</li>
  <li>add a sensor with an analogue output that records the loudness of surrounding noise</li>
  <li>connect that value to the width/scatter of the dot (‚Äúbrush‚Äù) &gt; use increments so the line will be less bumpy</li>
  <li>make different (scatter) brushes in processing</li>
  <li>add buttons for different brushes</li>
</ol>

<p>But this went south during the first step already as apparently determining 2 dimensional position (absolute or relative) is incredibly difficult. My first experiment will therefore be to figure out how I can use the sensor data generated by an accelerometer in a Processing sketch, and if I maybe can make another experimental design tool using that. I did get the suggestion from a friend to try positioning using a camera and OpenCV so I may look into that later.</p>

<p>But first: the start of the accelerometer experiment.</p>

<h2 id="used-sensors-and-items">Used sensors and items</h2>
<ul>
  <li>Accelerometer
<img src="https://cdn.sparkfun.com//assets/parts/6/1/3/3/10955-01.jpg" alt="" /></li>
</ul>
<p><a href="https://www.sparkfun.com/products/retired/10955">https://www.sparkfun.com/products/retired/10955</a>
<a href="https://cdn.sparkfun.com/datasheets/Sensors/Accelerometers/MMA8452Q.pdf">https://cdn.sparkfun.com/datasheets/Sensors/Accelerometers/MMA8452Q.pdf</a></p>

<table>
  <thead>
    <tr>
      <th>Pin Label</th>
      <th>Pin Function</th>
      <th>Input/Output</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>3.3V</td>
      <td>Power Supply</td>
      <td>Input</td>
      <td>Should be between 1.95 - 3.6V</td>
    </tr>
    <tr>
      <td>SDA</td>
      <td>I2C Data Signal</td>
      <td>Bi-directional</td>
      <td>Bi-directional data line. Voltage should not exceed power supply (e.g. 3.3V).</td>
    </tr>
    <tr>
      <td>SCL</td>
      <td>I2C Clock Signal</td>
      <td>Input</td>
      <td>Master-controlled clock signal. Voltage should not exceed power supply (e.g. 3.3V).</td>
    </tr>
    <tr>
      <td>I2</td>
      <td>Interrupt 2</td>
      <td>Output</td>
      <td>Programmable interrupt ‚Äî can indicate data ready, orientation change, tap, and more.</td>
    </tr>
    <tr>
      <td>I1</td>
      <td>Interrupt 1</td>
      <td>Output</td>
      <td>Programmable interrupt ‚Äî can indicate data ready, orientation change, tap, and more.</td>
    </tr>
    <tr>
      <td>GND</td>
      <td>Ground</td>
      <td>Input</td>
      <td>0V/common voltage.</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Breadboard</li>
  <li>Jumper wires</li>
  <li>Arduino Uno</li>
  <li>330Œ© Resistors</li>
</ul>

<h2 id="goals">Goals</h2>
<ul>
  <li>To see how an accelerometer works</li>
  <li>To convert the x and y data to something visual using Processing and Arduino</li>
</ul>

<h2 id="important">Important</h2>
<p>The MMA8452Q has a maximum voltage of 3.6V ‚Äì that range applies to both the power supply and the I2C pins. Because I am using an Arduino (5V), some level-shifting is required between devices.</p>

<h3 id="step-1-soldering-the-headers-to-the-breakout-board">Step 1: soldering the headers to the breakout board</h3>
<p>Make sure you follow <a href="https://www.kitronik.co.uk/blog/how-to-solder-in-ten-easy-steps/">these steps</a> when soldering.</p>

<p><img src="/images/fablab/accelerometer.jpg" alt="" /></p>

<h3 id="step-2-setting-up-the-board-using-the-hookup-guide">Step 2: setting up the board using the hookup guide</h3>
<p><img src="https://cdn.sparkfun.com/r/600-600/assets/learn_tutorials/2/4/9/mma8452q-hookup_bb.png" alt="" /></p>

<p>Since the MMA8452Q‚Äôs maximum voltage is 3.6V, you‚Äôll need to do some level shifting between your Arduino and accelerometer. Powering the accelerometer off the Arduino‚Äôs 3.3V rail is a good start, but you‚Äôll also need to add some protection on the SDA and SCL lines.</p>

<p>In the example hookup above, we used a pair of series resistors on the SDA and SCL lines. This version of ‚Äúlevel shifting‚Äù works in a pinch, but, if you want a more reliable level-shifting setup, we recommend using a more robust level shifter between the boards.</p>

<ul>
  <li>Since there were no 330 ohm resistors available I put multiple resistors in series to create the same amount of resistance. Using a multimeter I measured the following resistance: 334.1 ohm on the SCL pin and 333.6 ohm on the SDA pin.</li>
  <li>I‚Äôm using an Arduino Uno, on which the A4 pin corresponds with the SDA pin and the A5 pin with the SCL pin.</li>
</ul>

<p><img src="/images/fablab/accelerometer2.jpg" alt="" /></p>

<h3 id="step-3-test-using-the-example-code">Step 3: test using the example code</h3>
<p>The output result from the example code can either be in raw x, y and z data, or calculated acceleration values read out of the accelerometer; these are in units of g‚Äôs.</p>

<h4 id="calculated-acceleration-values">Calculated acceleration values</h4>
<video width="480" height="300" controls="">
  <source src="/images/fablab/serial_monitor.mp4" type="video/mp4" />
</video>

<h4 id="raw-data">Raw data</h4>
<video width="480" height="300" controls="">
  <source src="/images/fablab/serial_monitor_raw.mp4" type="video/mp4" />
</video>

<p>However these values are not the kind of x, y and z data that I wanted; apparently it is very hard to determine position using sensors. What I can do is use this data for other purposes in my tools (or to figure out a new way of illustrating using these values) but that will not fix my current problem.</p>

<h3 id="step-4-connecting-arduino-to-processing-to-use-the-generated-data">Step 4: connecting Arduino to Processing to use the generated data</h3>
<p>To accomplish this, I used the provided example code for the accelerometer provided by Sparkfun. I added some more comments for clarity. <a href="https://github.com/sparkfun/SparkFun_MMA8452Q_Arduino_Library/tree/master/examples/Example2_RawDataReading">https://github.com/sparkfun/SparkFun_MMA8452Q_Arduino_Library/tree/master/examples/Example2_RawDataReading</a></p>

<h4 id="arduino-code">Arduino code</h4>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cm">/*
  Library for the MMA8452Q
  By: Jim Lindblom and Andrea DeVore
  SparkFun Electronics

  Do you like this library? Help support SparkFun. Buy a board!
  https://www.sparkfun.com/products/14587

  This sketch uses the SparkFun_MMA8452Q library to initialize
  the accelerometer and stream raw x, y, z, acceleration
  values from it.

  Hardware hookup:
  Arduino --------------- MMA8452Q Breakout
    3.3V  ---------------     3.3V
    GND   ---------------     GND
  SDA (A4) --\/330 Ohm\/--    SDA
  SCL (A5) --\/330 Ohm\/--    SCL

  The MMA8452Q is a 3.3V max sensor, so you'll need to do some
  level-shifting between the Arduino and the breakout. Series
  resistors on the SDA and SCL lines should do the trick.

  License: This code is public domain, but if you see me
  (or any other SparkFun employee) at the local, and you've
  found our code helpful, please buy us a round (Beerware
  license).

  Distributed as is; no warrenty given.
*/</span>

<span class="cp">#include</span> <span class="cpf">&lt;Wire.h&gt;</span><span class="c1">                 // Must include Wire library for I2C</span><span class="cp">
#include</span> <span class="cpf">"SparkFun_MMA8452Q.h"</span><span class="c1">    // Click here to get the library: http://librarymanager/All#SparkFun_MMA8452Q</span><span class="cp">
</span>
<span class="n">MMA8452Q</span> <span class="n">accel</span><span class="p">;</span>                   <span class="c1">// Create instance of the MMA8452 class</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>             <span class="c1">// Sets the data rate in bits per second (baud) for serial data transmission. </span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"MMA8452Q Raw Data Reading Code!"</span><span class="p">);</span>
  <span class="n">Wire</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Not Connected. Please check connections and read the hookup guide."</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>      <span class="c1">// Wait for new data from accelerometer</span>
    <span class="c1">// Raw of acceleration of x, y, and z directions</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">getX</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>         <span class="c1">// This prints a tab so you can distinguish the numbers</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">getY</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">getZ</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>           <span class="c1">// New line</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="processing-code">Processing code</h3>
<p>This was based on the final answer on this forum: <a href="https://processing.org/discourse/beta/num_1254511350.html">https://processing.org/discourse/beta/num_1254511350.html</a>. The next step would be to figure out how to separate the raw data into separate arrays.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">//import Serial communication library</span>
<span class="kn">import</span> <span class="nn">processing.serial.*</span><span class="o">;</span>

<span class="nc">Serial</span> <span class="n">myPort</span><span class="o">;</span>  <span class="c1">// Create object from Serial class</span>
<span class="nc">String</span> <span class="n">myString</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="kt">float</span> <span class="n">num</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">lf</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>    <span class="c1">// Linefeed in ASCII code; a linefeed means moving one line forward. The code is \n.</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span>
<span class="o">{</span>
  <span class="nc">String</span> <span class="n">portName</span> <span class="o">=</span> <span class="nc">Serial</span><span class="o">.</span><span class="na">list</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">//change the 0 to a 1 or 2 etc. to match your port</span>
  <span class="n">myPort</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Serial</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">portName</span><span class="o">,</span> <span class="mi">9600</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">myPort</span><span class="o">.</span><span class="na">available</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">myString</span> <span class="o">=</span> <span class="n">myPort</span><span class="o">.</span><span class="na">readStringUntil</span><span class="o">(</span><span class="n">lf</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">myString</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">print</span><span class="o">(</span><span class="n">myString</span><span class="o">);</span>  <span class="c1">// Prints String but without the tabs</span>
  <span class="n">num</span><span class="o">=</span><span class="kt">float</span><span class="o">(</span><span class="n">myString</span><span class="o">);</span>   <span class="c1">// Converts and prints float, this does not work most of the time</span>
  <span class="n">println</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>          <span class="c1">// because when there is a minus in the second or third number</span>
    <span class="o">}</span>                    <span class="c1">// it's not a number (NaN)</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>The standard mode is 2g mode, so the sensitivity is 1024 counts/g.
<img src="/images\fablab\accelerometer_sensitivity.png" alt="" /></p>

<p>When placed flat on the floor, these are the measured values:
<img src="/images\fablab\accelerometer_level.png" alt="" /></p>

<h3 id="step-5-sensor-data-into-arrays">Step 5: Sensor data into arrays</h3>
<p>To use the data in Processing, you have to read the entire input line from the Arduino, then split the line with a comma (then you have a String[]) and parse each number into int[] with index one to one matching.</p>

<h4 id="arduino-code-1">Arduino code</h4>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;Wire.h&gt;</span><span class="c1">                 // Must include Wire library for I2C</span><span class="cp">
#include</span> <span class="cpf">"SparkFun_MMA8452Q.h"</span><span class="c1">    // Click here to get the library: http://librarymanager/All#SparkFun_MMA8452Q</span><span class="cp">
</span>
<span class="n">MMA8452Q</span> <span class="n">accel</span><span class="p">;</span>                   <span class="c1">// Create instance of the MMA8452 class</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>             <span class="c1">// Sets the data rate in bits per second (baud) for serial data transmission. </span>
  <span class="c1">//  Serial.println("MMA8452Q Raw Data Reading Code!"); // This messes up the integer arrays </span>
  <span class="n">Wire</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Not Connected. Please check connections and read the hookup guide."</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>      <span class="c1">// Wait for new data from accelerometer</span>
    <span class="c1">// Raw of acceleration of x, y, and z directions</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">getX</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">","</span><span class="p">);</span>         
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">getY</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">","</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">accel</span><span class="p">.</span><span class="n">getZ</span><span class="p">());</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>           <span class="c1">// New line</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>                  <span class="c1">// This delay is neccessary because Processing can't handle the speed (after a few moments it tries to combine two values into one int and that gives an error) </span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="processing-code-1">Processing code</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">//import Serial communication library</span>
<span class="kn">import</span> <span class="nn">processing.serial.*</span><span class="o">;</span>

<span class="nc">Serial</span> <span class="n">myPort</span><span class="o">;</span>  <span class="c1">// Create object from Serial class</span>
<span class="nc">String</span> <span class="n">myString</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">lf</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>    <span class="c1">// Linefeed in ASCII code</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span>
<span class="o">{</span>
  <span class="nc">String</span> <span class="n">portName</span> <span class="o">=</span> <span class="nc">Serial</span><span class="o">.</span><span class="na">list</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">//change the 0 to a 1 or 2 etc. to match your port</span>
  <span class="n">myPort</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Serial</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">portName</span><span class="o">,</span> <span class="mi">9600</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">myPort</span><span class="o">.</span><span class="na">available</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">myString</span> <span class="o">=</span> <span class="n">myPort</span><span class="o">.</span><span class="na">readStringUntil</span><span class="o">(</span><span class="n">lf</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">myString</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">//print(myString);  </span>
      <span class="nc">String</span><span class="o">[]</span> <span class="n">list</span> <span class="o">=</span> <span class="n">split</span><span class="o">(</span><span class="n">myString</span><span class="o">,</span> <span class="s">","</span><span class="o">);</span>
      <span class="c1">// printArray(list);</span>

      <span class="kt">int</span><span class="o">[]</span> <span class="n">intList</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">list</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
      <span class="o">{</span>
        <span class="n">intList</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span> <span class="c1">// this has to be trimmed, because of</span>
      <span class="o">}</span>          <span class="c1">// this issue: https://stackoverflow.com/questions/27604918/parseint-processing</span>
      <span class="n">printArray</span><span class="o">(</span><span class="n">intList</span><span class="o">);</span>  
      <span class="n">println</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h3 id="step-6-use-array-data-to-generate-art">Step 6: Use array data to generate art</h3>
<video width="480" height="300" controls="">
  <source src="/images/fablab/acctest1.mp4" type="video/mp4" />
</video>
<p>The video above was my first try at using the accelerometer values. To draw with the accelerometer, I wrote the following code underneath println() in the code above.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java">      <span class="n">pushMatrix</span><span class="o">();</span>
      <span class="n">translate</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="mi">400</span><span class="o">);</span>
      <span class="n">ellipse</span><span class="o">(</span><span class="n">intList</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">intList</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>  
      <span class="n">popMatrix</span><span class="o">();</span>
      <span class="kt">int</span> <span class="n">strokeInput</span> <span class="o">=</span> <span class="n">abs</span><span class="o">(</span><span class="n">intList</span><span class="o">[</span><span class="mi">2</span><span class="o">]/</span><span class="mi">8</span><span class="o">);</span>
      <span class="n">fill</span><span class="o">(</span><span class="n">strokeInput</span><span class="o">,</span> <span class="n">strokeInput</span><span class="o">,</span> <span class="n">strokeInput</span><span class="o">);</span></code></pre></figure>

<p>This is the result after a bit of trying out:
<img src="/images/fablab/designtool1.png" alt="" /></p>

<p>After this I worked on modifying the Processing code to make the illustration better. I also used a higher baud rate to receive more data so I would be able to make smoother lines.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GIdxBrYx-t8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="add-soft-sensor">Add soft sensor</h2>
<p>steps:</p>
<ul>
  <li>first test the wire and the fabric (conductivity) by trying to light an LED with them</li>
  <li>then make a kind of pressure sensor and see what the output values look like (can I use the pressure to change the color of the illustration? or should I use it as a soft on/off button?)</li>
</ul>

<p>I made a soft sensor attached to a pen to turn an LED on and off for now, to test it out. 
fjiaofjiaojdij</p>

<p>I would rather save the digital drawings on a sd every time I press a button but for now being able to attach it to Processing should be fine.</p>

<h4 id="sources">Sources</h4>
<p><a href="https://learn.sparkfun.com/tutorials/connecting-arduino-to-processing/all">https://learn.sparkfun.com/tutorials/connecting-arduino-to-processing/all</a>
<a href="https://learn.sparkfun.com/tutorials/mma8452q-accelerometer-breakout-hookup-guide">https://learn.sparkfun.com/tutorials/mma8452q-accelerometer-breakout-hookup-guide</a></p>
:ET