I"Bb<h1 id="neopixel-waag-logo">NeoPixel Waag logo</h1>
<p>I’m gonna make the Waag logo emit light with NeoPixels, with 3 modes that you can switch between: white light that can be dimmed with a pot meter, color that can be changed with the same pot meter, and rainbow mode (a standard NeoPixel option).</p>

<p><img src="/images/fablab/neopixel/IMG_9377.JPEG" alt="" /></p>

<h1 id="neopixels-and-arduino-mini">Neopixels and Arduino Mini</h1>
<p>What I’m using:</p>
<ul>
  <li>Arduino Pro Mini (for prototyping)</li>
  <li>NeoPixel 1/4 Ring (SK6812) <a href="https://cdn-shop.adafruit.com/product-files/1138/SK6812+LED+datasheet+.pdf">Datasheet</a></li>
  <li>Rotary switch <a href="https://tinkersphere.com/electronic-components/1018-b500k-linear-500k-ohm-taper-potentiometer.html">This one</a></li>
  <li>Button switch</li>
  <li>Jumper wires</li>
  <li>Resistors</li>
  <li>Breadboard</li>
  <li>Acrylic lasercut Waag logo (logo can be found <a href="https://waag.org/nl/huisstijl-waag">here</a>)</li>
</ul>

<p>Neopixel specifications:</p>

<p><img src="https://cdn-learn.adafruit.com/assets/assets/000/036/302/large1024/leds_fabprint.png?1476209677" alt="" /></p>

<p><img src="https://cdn-learn.adafruit.com/assets/assets/000/036/301/original/leds_schem.png?1476209664" alt="" /></p>

<p>Chaotic breadboard wiring:</p>

<p><img src="/images/fablab/neopixel/IMG_9037.JPEG" alt="" /></p>

<p>First I soldered the NeoPixel quarter rings into a circle. I used wires of about 10cm long so I could make a wider circle; since we want to mount the NeoPixels to the Waag logo it won’t be (too) noticable that the circle is interrupted. Below you can see the soldered neopixels and a sneak preview of the milled PCB.</p>

<p><img src="/images/fablab/neopixel/IMG_9344.JPEG" alt="" /></p>

<ul>
  <li>I first tried a 500 Ohm resistor between the DATA-IN and the Arduino, but that was too much resistance; 330 Ohm worked perfectly.</li>
  <li>I used a pulldown resistor for the switch (pulldown is between ground and the button); this is to prevent shorting the circuit. <a href="https://forum.arduino.cc/t/why-do-i-need-a-pull-down-resistor-in-the-button-example/364688/2">The resistor is there to prevent the short by limiting the current flowing; typically 1k to 10k in value.</a>.</li>
  <li>I used the strandtest.ino file in the NeoPixel library in the Arduino IDE to test whether it worked. First it wouldn’t upload, but that was because I specified the wrong board (Arduino Mini instead of Arduino Pro Mini). Then the ring wouldn’t turn on, first because some connections weren’t properly soldered and then because I connected to A6 instead of D6.</li>
</ul>

<h1 id="arduino-code">Arduino code</h1>
<p>Notes on the code:</p>
<ul>
  <li>Analog values between 0 and 1023 for the potentiometer; 65536 values in the color range so 65536 / 1023 so multiply value by about 64 to use the potentiometer to scroll through the colors.</li>
  <li>For the dimming of the white light: 0-1023 values divided by 4 is about 0-255.</li>
</ul>

<p>Code used:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;Adafruit_NeoPixel.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="n">pushButton</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>   <span class="c1">// choose the input pin (for a pushbutton)</span>
<span class="kt">int</span> <span class="n">pushButtonRotary</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="c1">// Potentiometer</span>
<span class="kt">int</span> <span class="n">potSensor</span> <span class="o">=</span> <span class="n">A0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">currentColourValue</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">lastState</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// the previous state from the input pin</span>
<span class="kt">int</span> <span class="n">currentState</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="c1">// the current reading from the input pin</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">hits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// Which pin on the Arduino is connected to the NeoPixels?</span>
<span class="cp">#define LED_PIN    7
</span>
<span class="c1">// How many NeoPixels are attached to the Arduino?</span>
<span class="cp">#define LED_COUNT 60
</span>
<span class="c1">// Declare our NeoPixel strip object:</span>
<span class="n">Adafruit_NeoPixel</span> <span class="nf">strip</span><span class="p">(</span><span class="n">LED_COUNT</span><span class="p">,</span> <span class="n">LED_PIN</span><span class="p">,</span> <span class="n">NEO_GRB</span> <span class="o">+</span> <span class="n">NEO_KHZ800</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// initialize serial communication at 9600 bits per second:</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="c1">// make the pushbutton's pin an input:</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">pushButton</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
  <span class="c1">//  pinMode(pushButton, INPUT_PULLUP);</span>

  <span class="n">strip</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>           <span class="c1">// INITIALIZE NeoPixel strip object (REQUIRED)</span>
  <span class="n">strip</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>            <span class="c1">// Turn OFF all pixels ASAP</span>
  <span class="n">strip</span><span class="p">.</span><span class="n">setBrightness</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span> <span class="c1">// Set BRIGHTNESS to about 1/5 (max = 255)</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">lightSwitcher</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">lightSwitcher</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">currentState</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">pushButton</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">sensorValue</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">potSensor</span><span class="p">);</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"lightSwitcher loop start"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">sensorValue</span><span class="p">);</span>  <span class="c1">// potentiometer value 0-1023</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">" potentiometer value"</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">currentState</span><span class="p">);</span> <span class="c1">// HIGH (1) or LOW (0), button pressed or not pressed</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">" button value"</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span> <span class="o">!=</span> <span class="n">lastState</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">hits</span> <span class="o">=</span> <span class="n">hits</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">hits</span><span class="p">);</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">" hits"</span><span class="p">);</span>
      <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">hits</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">whiteLight</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">hits</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">rainbow</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">hits</span> <span class="o">=</span> <span class="n">hits</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// otherwise we can't exit the rainbow part</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">hits</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">potentioMeter</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">hits</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">whiteLight</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span> <span class="o">!=</span> <span class="n">lastState</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">hits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">hits</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"reset hits"</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">whiteLight</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">sensorValue</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">potSensor</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strip</span><span class="p">.</span><span class="n">numPixels</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// For each pixel in strip...</span>
      <span class="n">strip</span><span class="p">.</span><span class="n">setPixelColor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
      <span class="n">strip</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>                          <span class="c1">//  Update strip to match</span>
      <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>                           <span class="c1">//  Pause for a moment</span>
      <span class="n">strip</span><span class="p">.</span><span class="n">setBrightness</span><span class="p">(</span><span class="n">sensorValue</span> <span class="o">/</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// 0-1023 values divided by 4 is about 0-255</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">potentioMeter</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"potentioMeter loop start"</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">sensorValue</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="n">potSensor</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strip</span><span class="p">.</span><span class="n">numPixels</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// For each pixel in strip...</span>
    <span class="n">strip</span><span class="p">.</span><span class="n">setPixelColor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">strip</span><span class="p">.</span><span class="n">gamma32</span><span class="p">(</span><span class="n">strip</span><span class="p">.</span><span class="n">ColorHSV</span><span class="p">(</span><span class="n">sensorValue</span> <span class="o">*</span> <span class="mi">64</span><span class="p">)));</span>
    <span class="n">strip</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>                          <span class="c1">//  Update strip to match</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>                           <span class="c1">//  Pause for a moment</span>
  <span class="p">}</span>
  <span class="n">currentState</span> <span class="o">=</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">pushButton</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">currentState</span><span class="p">);</span> <span class="c1">// HIGH (1) or LOW (0), button pressed or not pressed</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">" button value, we're in the potentiometer part now"</span><span class="p">);</span>


<span class="p">}</span>

<span class="c1">// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.</span>
<span class="kt">void</span> <span class="nf">rainbow</span><span class="p">(</span><span class="kt">int</span> <span class="n">wait</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Hue of first pixel runs 5 complete loops through the color wheel.</span>
  <span class="c1">// Color wheel has a range of 65536 but it's OK if we roll over, so</span>
  <span class="c1">// just count from 0 to 5*65536. Adding 256 to firstPixelHue each time</span>
  <span class="c1">// means we'll make 5*65536/256 = 1280 passes through this outer loop:</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">firstPixelHue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">firstPixelHue</span> <span class="o">&lt;</span> <span class="mi">65536</span><span class="p">;</span> <span class="n">firstPixelHue</span> <span class="o">+=</span> <span class="mi">256</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strip</span><span class="p">.</span><span class="n">numPixels</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// For each pixel in strip...</span>
      <span class="c1">// Offset pixel hue by an amount to make one full revolution of the</span>
      <span class="c1">// color wheel (range of 65536) along the length of the strip</span>
      <span class="c1">// (strip.numPixels() steps):</span>
      <span class="kt">int</span> <span class="n">pixelHue</span> <span class="o">=</span> <span class="n">firstPixelHue</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">65536L</span> <span class="o">/</span> <span class="n">strip</span><span class="p">.</span><span class="n">numPixels</span><span class="p">());</span>
      <span class="c1">// strip.ColorHSV() can take 1 or 3 arguments: a hue (0 to 65535) or</span>
      <span class="c1">// optionally add saturation and value (brightness) (each 0 to 255).</span>
      <span class="c1">// Here we're using just the single-argument hue variant. The result</span>
      <span class="c1">// is passed through strip.gamma32() to provide 'truer' colors</span>
      <span class="c1">// before assigning to each pixel:</span>
      <span class="n">strip</span><span class="p">.</span><span class="n">setPixelColor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">strip</span><span class="p">.</span><span class="n">gamma32</span><span class="p">(</span><span class="n">strip</span><span class="p">.</span><span class="n">ColorHSV</span><span class="p">(</span><span class="n">pixelHue</span><span class="p">)));</span>
    <span class="p">}</span>
    <span class="n">strip</span><span class="p">.</span><span class="n">show</span><span class="p">();</span> <span class="c1">// Update strip with new contents</span>
    <span class="n">delay</span><span class="p">(</span><span class="n">wait</span><span class="p">);</span>  <span class="c1">// Pause for a moment</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h1 id="replacing-arduino-pro-mini-with-attiny">Replacing Arduino Pro Mini with Attiny</h1>
<ul>
  <li>Following <a href="https://www.electronics-lab.com/project/using-new-attiny-processors-arduino-ide-attiny412-attiny1614-attiny3216-attiny1616-attiny3217/">these</a> steps to program ATTiny with Arduino IDE:
    <blockquote>
      <p>“On the preferences window, locate the “Additional Board Manager URLs” text box and enter http://drazzy.com/package_drazzy.com_index.json into the field as shown below and click the OK button”.</p>
    </blockquote>
  </li>
  <li>Then you can download the megaTinyCore library from the board manager.</li>
  <li>While trying to compile I encountered this error:
<img src="/images/fablab/neopixel/error1.jpg" alt="" />
I googled CPU speed not supported, and found an easy fix <a href="https://forums.adafruit.com/viewtopic.php?t=51030">here</a>. Just change one line in the Adafruit_NeoPixel.cpp file (increasing the speed limit on the 16MHz code to 21MHz, because the clock speed of the ATTiny’s used is 20MHz) and then the code succesfully compiles for both the ATTiny 3216 &amp; ATTiny 1614.</li>
  <li>When in doubt, look at <a href="https://fabacademy.org/2021/labs/waag/students/nadieh-bremer/final-project/#programming">Nadieh’s documentation</a></li>
  <li>Power via pin for the switch, and use the internal pullup resistor instead of a pulldown resistor. This flipped the state of the button from high to low and low to high, so I had to change some values for the code to work again (HIGH to LOW and 0 to 1 as base states).</li>
</ul>

<p><img src="https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Ffabacademy.org%2F2020%2Flabs%2Fkannai%2Fstudents%2Ftatsuro-homma%2Fimages%2Fassignment%2Fweek08%2Fw08_ds_04_pinmapping.jpg&amp;f=1&amp;nofb=1" alt="pinout attiny 1614" /></p>

<h2 id="kicad">KiCad</h2>

<p>Project schematic (including the capacitor mistake for the neopixel ring).</p>

<p><img src="/images/fablab/neopixel/schematic.jpg" alt="" /></p>

<p>This is where I assigned all components that I was going to add with wires to through-hole solder pads.</p>

<p><img src="/images/fablab/neopixel/assignfootprints.jpg" alt="" /></p>

<p>The rat’s nest:</p>

<p><img src="/images/fablab/neopixel/ratsnest.jpg" alt="" /></p>

<p>Final design with the rat’s nest all sorted out:</p>

<p><img src="/images/fablab/neopixel/export.jpg" alt="" /></p>

<p>3d preview of the board:</p>

<p><img src="/images/fablab/neopixel/final23d.jpg" alt="" /></p>

<h2 id="milling-the-board">Milling the board</h2>
<p>Below collage summary of milling the board. It wasn’t too eventful except that the through holes didn’t properly cut all the way through, so I used the milling bit afterwards to push through the holes.</p>

<p><img src="/images/fablab/waaglogo3.jpg" alt="" /></p>

<div class="row-2">
  <p><img src="/images/fablab/neopixel/IMG_9032.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9033.JPEG" alt="" /></p>
</div>

<p><img src="/images/fablab/neopixel/IMG_9031.JPEG" alt="" /></p>

<h2 id="soldering-the-board">Soldering the board</h2>

<div class="row-2">
  <p><img src="/images/fablab/neopixel/IMG_9034.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9036.JPEG" alt="" /></p>
</div>

<h2 id="notes">Notes</h2>
<ul>
  <li>Capacitor across power supply (to protect the chip against the initial onflow of electricity): 1uF</li>
  <li>330 Ohm resistor for neopixel</li>
  <li>Capacitor neopixel: 1000uF. Not adding a capacitor is the cause of NeoPixel flickering; I’ve added the capacitor to the board with through holes, not to the board as SMD since we didn’t have an SMD polarized capacitor of 1000uF.</li>
</ul>

<p>I accidentally connected the 330 Ohm resistor to the power instead of the data pin in KiCad and only found out that that happened when I was already done milling, so I added a 0 ohm resistor in place of the 330 one, removed a bit of the trace between the data pin and the ATTiny and added it there.</p>

<div class="row-2">
  <p><img src="/images/fablab/neopixel/IMG_9346.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9347.JPEG" alt="" /></p>
</div>

<h2 id="programming-the-attiny">Programming the ATTiny</h2>
<p>I used these specific hooks/claws (I forgot the name) to attach to the individual legs of the chip to program them. You can use these if you haven’t added a connector for a programmer.</p>

<p><img src="/images/fablab/neopixel/IMG_9072.JPEG" alt="" /></p>

<p>First prototype of the box:</p>

<p><img src="/images/fablab/neopixel/IMG_9038.JPEG" alt="" /></p>

<p>Assembly process:</p>

<div class="row-2">
  <p><img src="/images/fablab/neopixel/IMG_9343.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9345.JPEG" alt="" /></p>
</div>
<p><img src="/images/fablab/neopixel/IMG_9348.JPEG" alt="" /></p>
<div class="row-3">
  <p><img src="/images/fablab/neopixel/IMG_9381.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9349.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9350.JPEG" alt="" /></p>
</div>
<div class="row-2">
  <p><img src="/images/fablab/neopixel/IMG_9351.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9352.JPEG" alt="" /></p>
</div>

<p>Final result:</p>
<div class="row-3">
  <p><img src="/images/fablab/neopixel/IMG_9369.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9374.JPEG" alt="" />
<img src="/images/fablab/neopixel/IMG_9375.JPEG" alt="" /></p>
</div>

<iframe width="560" height="315" src="https://www.youtube.com/embed/JgbFLxxYwU0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
:ET